
.scroll {
    max-height: 100px;
    overflow-y: scroll;
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"sources":["webpack:///assets/js/Dashboard.vue"],"names":[],"mappings":";AACA;IACA;IACA;AACA","file":"app.css","sourcesContent":["<style>\n    .scroll {\n        max-height: 100px;\n        overflow-y: scroll;\n    }\n</style>\n\n<template>\n    <div>\n        <div class=\"container-fluid\">\n            <div class=\"row\">\n                <div class=\"col-lg-3 col-sm-6\">\n                    <div class=\"card gradient-1\">\n                        <div class=\"card-body\">\n                            <h3 class=\"card-title text-white\">Activities Created</h3>\n                            <div class=\"d-inline-block\">\n                                <!--<button @click=\"activitiesCreated\">Click</button>-->\n                                <h2 class=\"text-white\">{{ actCreated }}</h2>\n                                <p class=\"text-white mb-0\">All the activities you have created</p>\n                            </div>\n                            <span class=\"float-right display-5 opacity-5\"><i class=\"fa fa-calendar-plus\"></i></span>\n                        </div>\n                    </div>\n                    <div class=\"card gradient-2\">\n                        <div class=\"card-body\">\n                            <h3 class=\"card-title text-white\">Example1</h3>\n                            <div class=\"d-inline-block\">\n                                <!--<button @click=\"activitiesCreated\">Click</button>-->\n                                <h2 class=\"text-white\">{{ actCreated }}</h2>\n                                <p class=\"text-white mb-0\">text</p>\n                            </div>\n                            <span class=\"float-right display-5 opacity-5\"><i class=\"fa fa-users\"></i></span>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-xl-3 col-lg-6 col-sm-6 col-xxl-6 scroll\" style=\"max-height: 100px\">\n                    <div class=\"card\">\n                        <div class=\"card-body\">\n                            <h4 class=\"card-title\">Activity</h4>\n                            <div>asdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadfasdfsadf</div>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- /# column -->\n                <div class=\"col-lg-6\">\n                    <div class=\"card\">\n                        <div class=\"card-body\">\n                            <h4 class=\"card-title\">Activities created</h4>\n                            <div class=\"text-muted m-3\">These are the activities you created this year</div>\n                            <canvas id=\"team-chart\" width=\"500\" height=\"250\"></canvas>\n                        </div>\n                    </div>\n                    <!-- /# card -->\n                </div>\n\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col\">\n                    <div class=\"card\">\n                        <div class=\"card-body\">\n                            <h4 class=\"card-title\">Last activities you created</h4>\n                            <hr>\n                            <div id=\"MyActivities\">\n                                <div class=\"media border-bottom-1 pt-3 pb-3\" v-for=\"item in sorted_myActivities\">\n                                    <img width=\"35\" src=\"\" class=\"mr-3 rounded-circle\">\n                                    <div class=\"media-body\">\n                                        <h5>{{ item.title }}</h5>\n                                        <p class=\"mb-0\">{{ item.content.substring(0,400)+\"... \" }}</p>\n                                        <a type=\"button\" class=\"btn mt-2 btn-rounded btn-primary\" v-bind:href=\"'/activity/'+ item.id\">Show more</a>\n                                    </div>\n                                    <span class=\"text-white text-right gradient-9 ml-1 p-1 rounded\">\n                                        <div class=\"text-left\"><i class=\"fas fa-calendar-alt\"></i><b> Timetable</b></div>\n                                        <b>{{ item.start_time.date.substring(10,16) }}</b>  - <b>{{ item.end_time.date.substring(10,16) }}</b>  <br>\n                                        <div v-if=\"item.start_date.date.substring(0,10) == item.end_date.date.substring(0,10)\">\n                                            <b>{{ item.start_date.date.substring(0,10) }}</b>\n                                        </div>\n                                        <div v-else>From <b>{{ item.start_date.date.substring(0,10) }}</b> To <b>{{ item.end_date.date.substring(0,10) }}</b></div>\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-lg-6 col-xxl-6 col-sm-12\">\n                    <div class=\"card\">\n                        <div class=\"card-body\">\n                            <h4 class=\"card-title\">Last public activities</h4>\n                            <div id=\"PublicActivities\">\n                                <hr>\n                                <div class=\"media border-bottom-1 pt-3 pb-3\" v-for=\"item in sorted_allActivities\">\n                                    <img width=\"35\" src=\"\" class=\"mr-3 rounded-circle\">\n                                    <div class=\"media-body\">\n                                        <h5>{{ item.title }}</h5>\n                                        <p class=\"mb-0\">{{ item.content.substring(0,100)+\"... \" }} <b><a v-bind:href=\"'/activity/'+ item.id\">show more</a></b> </p>\n                                    </div>\n                                    <span class=\"text-white text-right gradient-7 p-1 ml-1 rounded\">\n                                        <div><i class=\"fas fa-calendar-alt\"></i> <b>{{ item.start_date.date.substring(0,10) }}</b></div>\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n    </div>\n    <!-- #/ container -->\n    </div>\n</template>\n\n<script>\n    import axios from \"axios\";\n\n    export default {\n        data: () => ({\n            actCreated: 0,\n            myActivities: [],\n            array: [],\n            allActivities: []\n        }),\n        mounted () {\n            axios\n                .get('/get-my-activities')\n                .then(response => (\n                    this.actCreated = response.data.length,\n                    this.myActivities = response.data\n                ))\n            setInterval(() => {\n                axios\n                    .get('/get-my-activities')\n                    .then(response => {\n                        var aux = response.data\n                        if (aux < this.myActivities ? -1 : +(aux > this.myActivities)){\n                            this.myActivities = aux\n                        }\n                    })\n            }, 1e3)\n\n            axios\n                .get('/get-all-activities')\n                .then(response => (\n                    this.allActivities = response.data\n                ))\n            setInterval(() => {\n                axios\n                    .get('/get-all-activities')\n                    .then(response => {\n                        var aux = response.data\n                        if (aux < this.allActivities ? -1 : +(aux > this.allActivities)){\n                            this.allActivities = aux\n                        }\n                    })\n            }, 1e3)\n\n        },\n        computed : {\n            sorted_myActivities() {\n                return this.myActivities.sort((a, b) => { return a.date_created.date - b.date_created.date;}).reverse().slice(0,3);\n            },\n            sorted_allActivities() {\n                return this.allActivities.sort((a, b) => { return a.date_created.date - b.date_created.date;}).reverse().slice(0,5);\n            },\n            sorted_todayActivities() {\n                return this.allActivities.sort((a, b) => { return a.date_created.date - b.date_created.date;}).reverse();\n            }\n        }\n    }\n</script>"],"sourceRoot":""}*/